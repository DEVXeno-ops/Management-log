const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const si = require('systeminformation');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ uptime
const formatUptime = (seconds) => {
  const hrs = Math.floor(seconds / 3600);
  const mins = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  return `${hrs} ‡∏ä‡∏°. ${mins} ‡∏ô‡∏≤‡∏ó‡∏µ ${secs} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`;
};

// Logging error
const logError = (error, context) => {
  console.error(`‚ùå ERROR in ${context}:`);
  console.error(error.message || error);
  console.error(error.stack || '');
};

module.exports = {
  data: new SlashCommandBuilder()
    .setName('info')
    .setDescription('‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÅ‡∏ö‡∏ö real-time'),

  async execute(interaction) {
    try {
      await interaction.deferReply();

      const { client } = interaction;
      const botUser = client.user;
      const guildCount = client.guilds.cache.size;
      const userCount = client.users.cache.size;
      const ping = client.ws.ping;
      const uptime = client.uptime / 1000; // milliseconds to seconds

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
      const [mem, cpu, disks] = await Promise.all([
        si.mem(),
        si.currentLoad(),
        si.fsSize().catch(() => []),
      ]);

      const totalRAM = (mem.total / 1024 / 1024 / 1024).toFixed(2);
      const usedRAM = ((mem.total - mem.available) / 1024 / 1024 / 1024).toFixed(2);
      const cpuUsage = cpu.currentLoad.toFixed(2);

      let diskUsed = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
      let diskTotal = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
      if (disks[0]) {
        diskUsed = (disks[0].used / 1024 / 1024 / 1024).toFixed(2);
        diskTotal = (disks[0].size / 1024 / 1024 / 1024).toFixed(2);
      }

      const embed = new EmbedBuilder()
        .setColor(0x00AE86)
        .setTitle(`üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó: ${botUser.username}`)
        .setThumbnail(botUser.displayAvatarURL({ dynamic: true }))
        .addFields(
          { name: 'üÜî ‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó', value: botUser.globalName || botUser.username, inline: true },
          { name: 'üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠', value: `<t:${Math.floor(botUser.createdTimestamp / 1000)}:F>`, inline: true },
          { name: 'üì° ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', value: botUser.presence?.status ?? '‡πÑ‡∏°‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå', inline: true },
          { name: 'üåê ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà', value: `${guildCount}`, inline: true },
          { name: 'üë• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏°', value: `${userCount}`, inline: true },
          { name: 'üì∂ Ping', value: `${ping} ms`, inline: true },
          { name: '‚è±Ô∏è Uptime', value: formatUptime(uptime), inline: true },
          { name: 'üíæ RAM', value: `${usedRAM} GB / ${totalRAM} GB`, inline: true },
          { name: 'üñ•Ô∏è CPU', value: `${cpuUsage}%`, inline: true },
          { name: 'üìÄ Disk', value: `${diskUsed} GB / ${diskTotal} GB`, inline: true },
        )
        .setTimestamp()
        .setFooter({
          text: '‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡∏ö‡∏≠‡∏ó Discord',
          iconURL: botUser.displayAvatarURL({ dynamic: true }),
        });

      await interaction.editReply({ embeds: [embed] });

    } catch (error) {
      logError(error, 'info command');
      await interaction.editReply({
        content: '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ!',
        ephemeral: true,
      });
    }
  },
};
